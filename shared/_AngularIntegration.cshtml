@using DotNetNuke.Framework;
@using System.Linq;
@using System.Text.RegularExpressions;
@using System.Web.Helpers;
@using ToSic.Razor.Blade;
@functions {
  // -------------------------------------------------------------------------------------
  // These helpers are used by the CSHTML code which loads the angular app.
  // They do a bunch of things, like switching between testing/live code and more.
  // -------------------------------------------------------------------------------------



  // -------------------------------- Current Edition Info -------------------------------
  /// the current edition of this app, as stored in the cookie (or default in not set)
  public string CurrentEdition {
    get { return GetEditionFromCookie(DefaultEdition); }
  }


  
  // ------------------------------ Get from Generated HTML ------------------------------
  // load the Angular generated html file and keep only the important parts
  public string ImportAngularHtml(string appName = DefaultAppName, string appTag = DefaultAppTag) {
    // 1. build the path to where the angular app is stored
    var resourcesPath = App.Path + "/" + CurrentEdition + "/dist/" + appName;
    var indexFile = resourcesPath + "/index.html";
    string html_orig;

    // 2. Read body contents from index.html
    try {
      html_orig = System.IO.File.ReadAllText(Server.MapPath(indexFile));
    } catch {
      return "Error trying to access '" + indexFile + "' - it probably doesn't exist";
    }

    // 3.1. Get only the body contents
    var html = Regex.Match(html_orig, "<body.*?>(.*?)</body>", RegexOptions.Singleline).Groups[1].Value;

    // 3.2. Get stylesheets
    html += Regex.Match(html_orig, "<link rel=\"stylesheet\".*?>", RegexOptions.Singleline).Groups[0].Value;

    // 4. Change stylesheet and script paths
    html = Regex.Replace(html, "(src|href)=\"(.*?)\"", "$1=\"" + resourcesPath + "/$2\"");

    // 5. find the app-tag, and add the edition
    html = html.Replace("<" + appTag + ">", "<" + appTag + AppAttributes() + ">");

    return html;
  }
}

@*
  // --------------------------------   Get from ng serve   -------------------------------
  This adds the tag and JS files needed to hot-load the angular app 
*@
@helper LoadFromLocalNgServe(string appTag = DefaultAppTag, string localDevServer = LocalDevServer) {

  @Html.Raw("<" + appTag + AppAttributes() + ">" 
    + "This would load all scripts from " + localDevServer + ". If you see this message, your local dev is either not running, or the configuration is wrong. <br>"
    + "To make sure you're doing things right, please follow <a href='https://azing.org/2sxc/r/oCmPBI3p' target='_blank'>these instructions</a>."
    + "</" + appTag + ">")
  <script src="@LocalDevServer/runtime.js" type="module"></script>
  <script src="@LocalDevServer/polyfills.js" type="module"></script>
  <script src="@LocalDevServer/styles.js" type="module"></script>
  <script src="@LocalDevServer/vendor.js" type="module"></script>
  <script src="@LocalDevServer/main.js" type="module"></script>
}

@*
  // -------------------------------- Show Edition Select -------------------------------
  Show the toolbar to select an edition - usually only for the superuser / developer
*@
@helper ShowEditionSelectorForThisApp(string editions = DefaultEditions) {
  var Editions = editions.Split(',');
  <div class="alert alert-info">
    <span style="vertical-align: middle;">
      Edition to show: &nbsp; 
    </span>
    <div class="btn-group">
      @foreach(var name in Editions) {
        var selected = name == CurrentEdition ? "selected" : "not-selected";
        var style = name == CurrentEdition ? "font-weight: bold; text-decoration: underline;" : "";
        <button type="button" onclick="sxcAngularApp.setEdition('@name')" class='btn btn-default' style="@style">
          @name
        </button>
      }
    </div>
  </div>

  <script>
    window.sxcAngularApp = {
      // Source: https://stackoverflow.com/questions/14573223/set-cookie-and-get-cookie-with-javascript
      setCookie: function setCookie(name,value,days) {
        var expires = "";
        if (days) {
          var date = new Date();
          date.setTime(date.getTime() + (days*24*60*60*1000));
          expires = "; expires=" + date.toUTCString();
        }
        document.cookie = name + "=" + (value || "")  + expires + "; path=/";
      },
      eraseCookie: function eraseCookie(name) {   
        document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/';
      },
      setEdition: function setEdition(edition) {
        let cookieName = '@EditionCookieName()';
        if(edition)
          this.setCookie(cookieName, edition);
        else
          this.eraseCookie(cookieName);

        // reload page, preserving hash & angular route
        location.reload();
      }
    }
  </script>
}


@functions {
  // ----------------------------------  Private Constants ----------------------------------
  private const string DefaultAppName = "ng-app";   // Angular app name if not set
  private const string DefaultAppTag = "app-root";  // Angular app tag if not set
  private const string DefaultEdition = "live";    // the default edition if nothing is set
  private const string DefaultEditions = "live,staging,local";  // Default list of editions
  private const string CookieNameTemplate = "polymorph-app-#-edition"; // the cookie name to remember edition when developing / testing

  private const string LocalDevServer = "http://localhost:4200"; // default localhost dev-server using angular  

  // ------------------------------- Private Functions ------------------------------

  /// The cookie name to store the edition when developing / testing uses the app-id in the key, so it won't interfere with other apps
  private string EditionCookieName() {
    return CookieNameTemplate.Replace("#", App.AppId.ToString());
  }

  /// Get the edition from the cookie
  private string GetEditionFromCookie(string defaultEdition) {
    var key = EditionCookieName();

    return Request.Cookies.AllKeys.Contains(key) 
      ? Request.Cookies[key].Value 
      : defaultEdition;
  }

  private string AppAttributes() {
    var edition = CurrentEdition;
    return " " + Tag.Attr("edition", edition) + " " + Tag.Attr("api-edition", edition);
  }
}