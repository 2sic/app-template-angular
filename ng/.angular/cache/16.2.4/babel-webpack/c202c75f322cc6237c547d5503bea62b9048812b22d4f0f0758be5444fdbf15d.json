{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport { ComponentWithSubscriptions } from '../../core/component-with-subscriptions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"./team.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@2sic.com/sxc-angular\";\nimport * as i5 from \"./person/person.component\";\nimport * as i6 from \"./business-unit/business-unit-selector.component\";\nimport * as i7 from \"./team-explained.component\";\nfunction TeamComponent_li_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"li\", 0);\n    i0.ɵɵlistener(\"refresh\", function TeamComponent_li_5_Template_li_refresh_0_listener() {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.teamSvc.refresh());\n    });\n    i0.ɵɵelement(1, \"app-person\", 2);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const person_r1 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"sxc-toolbar\", ctx_r0.toolbarFor(person_r1));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"person\", person_r1);\n  }\n}\nexport let TeamComponent = /*#__PURE__*/(() => {\n  class TeamComponent extends ComponentWithSubscriptions {\n    constructor(route, teamSvc, cdr) {\n      super();\n      this.route = route;\n      this.teamSvc = teamSvc;\n      this.cdr = cdr;\n      /** The data which is shown in the template */\n      this.team = [];\n      // listen to route changes and tell the team-service to filter by the route specified\n      // this must happen in this component, as the route belongs to the component\n      // and the service cannot know the components route.\n      this.autoUnsubscribe(this.route.params.pipe(map(params => params.name || '')).subscribe(name => this.teamSvc.setFilter(name)));\n      // listen to team changes and add to view, + trigger detectChanges an we want OnPush strategy\n      // #ExampleData\n      this.autoUnsubscribe(this.teamSvc.team$.subscribe(newTeam => {\n        this.team = newTeam;\n        this.cdr.detectChanges();\n      }));\n    }\n    /**\n     * This ensures that angular can refresh the list-view in a faster/optimal way\n     */\n    trackById(index, person) {\n      return person.Id;\n    }\n    /**\n     * Create a toolbar configuration for a person or for new\n     * #ExampleContentManagement\n     */\n    toolbarFor(person) {\n      const mainConfig = 'toolbar=empty?contentType=Person&entityId=' + (person?.Id ?? '0');\n      return person ? [mainConfig, \"edit\", \"delete&color=gray?entityGuid=\" + person.Guid + \"&title=\" + person.Name] : [mainConfig, 'new'];\n    }\n    static #_ = this.ɵfac = function TeamComponent_Factory(t) {\n      return new (t || TeamComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.TeamService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: TeamComponent,\n      selectors: [[\"app-team\"]],\n      features: [i0.ɵɵInheritDefinitionFeature],\n      decls: 8,\n      vars: 3,\n      consts: [[3, \"sxc-toolbar\", \"refresh\"], [3, \"sxc-toolbar\", \"refresh\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [3, \"person\"]],\n      template: function TeamComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0);\n          i0.ɵɵlistener(\"refresh\", function TeamComponent_Template_div_refresh_0_listener() {\n            return ctx.teamSvc.refresh();\n          });\n          i0.ɵɵelementStart(1, \"h2\");\n          i0.ɵɵtext(2, \"Team\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(3, \"app-business-unit-selector\");\n          i0.ɵɵelementStart(4, \"ol\");\n          i0.ɵɵtemplate(5, TeamComponent_li_5_Template, 2, 2, \"li\", 1);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(6, \"hr\")(7, \"app-team-explained\");\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"sxc-toolbar\", ctx.toolbarFor());\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"ngForOf\", ctx.team)(\"ngForTrackBy\", ctx.trackById);\n        }\n      },\n      dependencies: [i3.NgForOf, i4.SxcTagToolbarDirective, i5.PersonComponent, i6.BusinessUnitSelectorComponent, i7.TeamExplainedComponent],\n      encapsulation: 2,\n      changeDetection: 0\n    });\n  }\n  return TeamComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}