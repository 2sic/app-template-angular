"use strict";(self.webpackChunkng_app=self.webpackChunkng_app||[]).push([[507],{1507:(i,s,o)=>{o.r(s),o.d(s,{IntroConventionsComponent:()=>n});var e=o(3953);let n=(()=>{class t{static \u0275fac=function(a){return new(a||t)};static \u0275cmp=e.VBU({type:t,selectors:[["app-intro-route"]],standalone:!0,features:[e.aNF],decls:30,vars:0,template:function(a,r){1&a&&(e.j41(0,"h3"),e.EFF(1,"Conventions used in the code"),e.k0s(),e.j41(2,"p"),e.EFF(3," We strive to create all our demos / tutorials / templates according to best practices - while keeping a balance to making it simple. Here are some important conventions we use, just to help you better navigate our code:\n"),e.k0s(),e.j41(4,"ol")(5,"li"),e.EFF(6," We use a lot of "),e.j41(7,"code"),e.EFF(8,"observables"),e.k0s(),e.EFF(9," as is best practices in Angular. Since it's helpful to know what variables are observable streams, we usually add a "),e.j41(10,"code"),e.EFF(11,"$"),e.k0s(),e.EFF(12," to the end of the variable name. For example, a stream giving you a team is called "),e.j41(13,"code"),e.EFF(14,"team$"),e.k0s(),e.EFF(15,". "),e.k0s(),e.j41(16,"li"),e.EFF(17," We split the application into the intro/root part, and all the examples are in a separate "),e.j41(18,"code"),e.EFF(19,"module"),e.k0s(),e.EFF(20,". This is great for demonstrating "),e.j41(21,"code"),e.EFF(22,"sub-modules"),e.k0s(),e.EFF(23,", "),e.j41(24,"code"),e.EFF(25,"sub-routing"),e.k0s(),e.EFF(26," and more. It also allows you to just copy this app, remove the "),e.j41(27,"code"),e.EFF(28,"examples"),e.k0s(),e.EFF(29," module and build whatever you want. "),e.k0s()())},encapsulation:2})}return t})()}}]);